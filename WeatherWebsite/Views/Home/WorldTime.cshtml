@{
    ViewData["Title"] = "World Time";
}

<div class="container">
    <div id="map"></div>
    <div class="chat-bubble" id="chatBubble" style="display: none;">
        <h4>Location: <span id="bubbleLocation">Unknown</span></h4>
        <h4>Current Time: <span id="bubbleTime"></span></h4>
    </div>
</div>

@section scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.34/moment-timezone-with-data.min.js"></script>
    <script>
        let map = L.map('map').setView([51.505, -0.09], 2);

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);

        let selectedTimezone = null;
        let marker = null;

        const updateLocationTime = (lat, lng) => {
            // Remove existing marker if present
            if (marker) {
                map.removeLayer(marker);
            }

            // Add a new marker at the clicked location
            marker = L.marker([lat, lng]).addTo(map);

            let city = "Unknown";
            let country = "Unknown";
            let time = "Fetching...";

            // Set initial popup content
            marker.bindPopup(`<div>
                <strong>Location:</strong> ${city}, ${country}<br>
                <strong>Time:</strong> ${time}
            </div>`).openPopup();

            fetch(`https://api.timezonedb.com/v2.1/get-time-zone?key=RN6Z9J9CLQC3&format=json&by=position&lat=${lat}&lng=${lng}`)
                .then(response => response.json())
                .then(data => {
                    selectedTimezone = data.zoneName;
                    time = moment().tz(selectedTimezone).format('DD-MM-YYYY HH:mm:ss');
                    document.getElementById('bubbleTime').textContent = time;

                    // Update popup content with time
                    marker.setPopupContent(`<div>
                        <strong>Location:</strong> ${city}, ${country}<br>
                        <strong>Time:</strong> ${time}
                    </div>`);
                })
                .catch(error => {
                    console.error('Error fetching time:', error);
                });

            // Perform reverse geocoding to get country
            fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}&zoom=10`)
                .then(response => response.json())
                .then(data => {
                    city = data.address.city || data.address.town ||
                            data.address.village || data.address.county || data.address.state || 
                            data.address.province || data.address.district || data.address.district ||'Unknown';
                    country = data.address.country || 'Unknown';

                    // Update popup content with city/country 
                    marker.setPopupContent(`<div>
                        <strong>Location:</strong> ${city}, ${country}<br>
                        <strong>Time:</strong> ${time}
                    </div>`);
                })
                .catch(error => {
                    console.error('Error fetching country:', error);
                });
        }

        const updateLiveClock = () => {
            if (selectedTimezone) {
                document.getElementById('bubbleTime').textContent = moment().tz(selectedTimezone).format('YYYY-MM-DD HH:mm:ss');
            }
        }

        map.on('click', (e) => {
            var lat = e.latlng.lat;
            var lng = e.latlng.lng;
            updateLocationTime(lat, lng);
        });

        setInterval(updateLiveClock, 1000);
    </script>
}